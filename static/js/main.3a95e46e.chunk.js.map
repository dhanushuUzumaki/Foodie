{"version":3,"sources":["components/InfoBox.js","components/MapWithMarkers.js","components/App.js","serviceWorker.js","index.js"],"names":["InfoBox","props","visible","marker","console","log","name","id","Container","Card","Img","variant","src","item","imageUrl","Body","Title","undefined","price","Text","isClosed","parseFloat","distance","toFixed","rating","reviewCount","supportsDelivery","Link","href","phone","displayPhn","Fragment","MapWithMarkers","state","location","activeMarker","selectedPlace","showingInfoWindow","businesses","onMarkerClick","setState","onInfoWindowClose","onMapClicked","parseBuisinessResponse","data","map","business","image_url","is_closed","review_count","display_phone","coordinates","transactions","indexOf","getBusinesses","latitude","longitude","limit","sortBy","process","MOCK_API","YELP_URL","axios","method","url","params","sort_by","headers","Authorization","YELP_API_KEY","then","r","catch","e","error","componentDidMount","navigator","geolocation","getCurrentPosition","position","lat","coords","lng","alert","this","google","key","onClick","icon","anchor","maps","Point","scaledSize","Size","className","initialCenter","zoom","getBusinessMarkers","getMap","onClose","React","Component","GoogleApiWrapper","apiKey","GAPI_KEY","App","Boolean","window","hostname","match","dotenv","config","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"qVA+BeA,G,MA3BC,SAACC,GAAW,IAClBC,EAAoBD,EAApBC,QAASC,EAAWF,EAAXE,OAGjB,OAFAC,QAAQC,IAAIJ,GAERC,GAA2B,YAAhBC,EAAOG,KAElB,yBAAKC,GAAG,WACN,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMC,IAAKT,EAAOU,KAAKC,WACzC,kBAACL,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,KAAab,EAAOG,KAApB,SAAiDW,IAAtBd,EAAOU,KAAKK,MAAZ,YAAuCf,EAAOU,KAAKK,OAAU,IACxF,kBAACT,EAAA,EAAKU,KAAN,KACGhB,EAAOU,KAAKO,SAAW,SAAW,OAAO,6BAD5C,aAEaC,WAAWlB,EAAOU,KAAKS,UAAUC,QAAQ,GAFtD,UAEgE,6BAFhE,WAGWpB,EAAOU,KAAKW,OAHvB,OAGmCrB,EAAOU,KAAKY,YAH/C,YAGoE,6BAHpE,sBAIsBtB,EAAOU,KAAKa,iBAAmB,MAAQ,KAAK,8BANpE,UAQS,kBAACjB,EAAA,EAAKkB,KAAN,CAAWC,KAAI,cAASzB,EAAOU,KAAKgB,QAAU1B,EAAOU,KAAKiB,gBAM/D,kBAAC,IAAMC,SAAP,QCnBVC,G,iNAEJC,MAAQ,CACNC,SAAU,KACVC,aAAc,GACdC,cAAe,GACfC,mBAAmB,EACnBC,WAAY,I,EAGdC,cAAgB,SAACtC,EAAOE,GAAR,OACd,EAAKqC,SAAS,CACZL,aAAchC,EACdiC,cAAenC,EACfoC,mBAAmB,K,EAGvBI,kBAAoB,kBAClB,EAAKD,SAAS,CACZL,aAAc,KACdE,mBAAmB,K,EAGvBK,aAAe,WACT,EAAKT,MAAMI,mBACb,EAAKG,SAAS,CACZL,aAAc,KACdE,mBAAmB,K,EAIzBM,uBAAyB,SAACC,GAgCxB,OA/BUA,EAAKN,WAAWO,KAAI,SAAAC,GAAa,IAEvCvC,EAWEuC,EAXFvC,GACAD,EAUEwC,EAVFxC,KACWQ,EASTgC,EATFC,UACW3B,EAQT0B,EARFE,UACcvB,EAOZqB,EAPFG,aACAzB,EAMEsB,EANFtB,OACAN,EAKE4B,EALF5B,MACAW,EAIEiB,EAJFjB,MACeC,EAGbgB,EAHFI,cACA5B,EAEEwB,EAFFxB,SACA6B,EACEL,EADFK,YAIF,MAAO,CACL5C,KACAD,OACAQ,WACAM,WACAK,cACAD,SACAN,QACAW,QACAC,aACAR,SAXFA,GAAY,KAYVI,kBAbkE,IAA/CoB,EAASM,aAAaC,QAAQ,YAcjDF,mB,EAMNG,cAAgB,YAA6C,IAA1CC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC7CtD,QAAQC,IAAIsD,2JAAYC,UAOtBxD,QAAQC,IAAIsD,2JAAYE,UAExBC,IAAM,CACJC,OAAQ,MACRC,IAAKL,2JAAYE,SACjBI,OAAQ,CACNV,WACAC,YACAC,QACAS,QAASR,GAEXS,QAAS,CACPC,cAAc,UAAD,OAAYT,2JAAYU,iBAEtCC,MAAK,SAAAC,GACN,IAAMjC,EAAa,EAAKK,uBAAuB4B,EAAE3B,MACjD,EAAKJ,SAAS,CAAEF,kBACfkC,OAAM,SAAAC,GAAC,OAAIrE,QAAQsE,MAAMD,O,EAKhCE,kBAAoB,WAkBdC,UAAUC,aACZD,UAAUC,YAAYC,oBAlBR,SAACC,GACf,IAAMC,EAAMD,EAASE,OAAO1B,SACtB2B,EAAMH,EAASE,OAAOzB,UAC5B,EAAKhB,SAAS,CACZN,SAAU,CACR8C,MAAKE,QAEN,EAAK5B,cAAc,CACpBC,SAAUyB,EACVxB,UAAW0B,EACXzB,MAAO,GACPC,OAAQ,iBAGE,WACZyB,MAAM,uE,oFAOY,IAAD,OACX7C,EAAe8C,KAAKnD,MAApBK,WACA+C,EAAWD,KAAKnF,MAAhBoF,OACR,OAAO/C,EAAWO,KAAI,SAAAC,GAAa,IAAD,EACUA,EAASK,YAAjC6B,EADc,EACxBzB,SAA0B2B,EADF,EACT1B,UACvB,OAAO,kBAAC,SAAD,CACLlD,KAAMwC,EAASxC,KACfgF,IAAKxC,EAASvC,GACdgF,QAAS,EAAKhD,cACdwC,SAAU,CAAEC,MAAKE,OACjBM,KAAM,CACJxB,IAAKlB,EAAShC,SACd2E,OAAQ,IAAIJ,EAAOK,KAAKC,MAAM,EAAG,IACjCC,WAAY,IAAIP,EAAOK,KAAKG,KAAK,GAAI,KAEvChF,KAAMiC,S,+BAMV,OACE,kBAAC,MAAD,CACEgD,UAAU,MACVT,OAAQD,KAAKnF,MAAMoF,OACnBE,QAASH,KAAK1C,aACdqD,cAAeX,KAAKnD,MAAMC,SAC1B8D,KAAM,IAEN,kBAAC,SAAD,CAAQ1F,KAAK,UAAUiF,QAASH,KAAK7C,gBAEpC6C,KAAKa,wB,+BAOV,OADA7F,QAAQC,IAAI+E,KAAKnD,OACU,MAAvBmD,KAAKnD,MAAMC,SAEX,6BACE,6BACGkD,KAAKc,UAER,6BACE,kBAAC,EAAD,CACE/F,OAAQiF,KAAKnD,MAAME,aACnBgE,QAASf,KAAK3C,kBACdvC,QAASkF,KAAKnD,MAAMI,sBAMhB,kC,GA7KW+D,IAAMC,YAkLpBC,6BAAiB,CAC9BC,OAAQ5C,2JAAY6C,UADPF,CAEZtE,GC9KYyE,E,iLATP,OACI,6BACI,sCAEA,kBAAC,EAAD,W,GANEL,IAAMC,WCQJK,QACW,cAA7BC,OAAOzE,SAAS0E,UAEe,UAA7BD,OAAOzE,SAAS0E,UAEhBD,OAAOzE,SAAS0E,SAASC,MACvB,2D,mBCXNC,EAAOC,SAEPC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBvC,WACrBA,UAAUwC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd/C,OAAM,SAAAE,GACLtE,QAAQsE,MAAMA,EAAM8C,c","file":"static/js/main.3a95e46e.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Container } from 'react-bootstrap';\nimport '../styles/InfoBox.css'\n\nconst InfoBox = (props) => {\n  const { visible, marker } = props;\n  console.log(props);\n\n  if (visible && marker.name !== 'current') {\n    return (\n      <div id=\"infobox\">\n        <Container>\n          <Card>\n            <Card.Img variant=\"top\" src={marker.item.imageUrl} />\n            <Card.Body>\n              <Card.Title>{marker.name} {marker.item.price !== undefined ? `- ${marker.item.price}` : ''}</Card.Title>\n              <Card.Text>\n                {marker.item.isClosed ? 'Closed' : 'Open'}<br />\n                Distance: {parseFloat(marker.item.distance).toFixed(2)} miles <br />\n                Rating: {marker.item.rating}/5 ({marker.item.reviewCount} reviews)<br />\n                Supports Delivery: {marker.item.supportsDelivery ? 'Yes' : 'No'}<br />\n              </Card.Text>\n              Phone: <Card.Link href={`tel:${marker.item.phone}`}>{marker.item.displayPhn}</Card.Link>\n            </Card.Body>\n          </Card>\n        </Container>\n      </div>\n    );\n  } else return <React.Fragment />;\n}\n\nexport default InfoBox;","import React from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nimport axios from 'axios';\nimport businessesData from '../data/businesses';\nimport InfoBox from './InfoBox';\nimport '../styles/MapWithMarkers.css';\n\nconst mockApi = false;\n\nclass MapWithMarkers extends React.Component {\n\n  state = {\n    location: null,\n    activeMarker: {},\n    selectedPlace: {},\n    showingInfoWindow: false,\n    businesses: []\n  };\n\n  onMarkerClick = (props, marker) =>\n    this.setState({\n      activeMarker: marker,\n      selectedPlace: props,\n      showingInfoWindow: true\n    });\n\n  onInfoWindowClose = () =>\n    this.setState({\n      activeMarker: null,\n      showingInfoWindow: false\n    });\n\n  onMapClicked = () => {\n    if (this.state.showingInfoWindow)\n      this.setState({\n        activeMarker: null,\n        showingInfoWindow: false\n      });\n  };\n\n  parseBuisinessResponse = (data) => {\n    const d = data.businesses.map(business => {\n      let {\n        id,\n        name,\n        image_url: imageUrl,\n        is_closed: isClosed,\n        review_count: reviewCount,\n        rating,\n        price,\n        phone,\n        display_phone: displayPhn,\n        distance,\n        coordinates\n      } = business,\n        supportsDelivery = business.transactions.indexOf('delivery') !== -1;\n      distance /= 1609; // converting to mile\n      return {\n        id,\n        name,\n        imageUrl,\n        isClosed,\n        reviewCount,\n        rating,\n        price,\n        phone,\n        displayPhn,\n        distance,\n        supportsDelivery,\n        coordinates\n      };\n    });\n    return d;\n  }\n\n  getBusinesses = ({ latitude, longitude, limit, sortBy }) => {\n    console.log(process.env.MOCK_API);\n    \n    if (mockApi) {\n      const businesses = this.parseBuisinessResponse(businessesData);\n      this.setState({ businesses });\n      return;\n    } else {\n      console.log(process.env.YELP_URL);\n      // TODO: Support pagination style requests\n      axios({\n        method: \"GET\",\n        url: process.env.YELP_URL,\n        params: {\n          latitude,\n          longitude,\n          limit,\n          sort_by: sortBy\n        },\n        headers: {\n          Authorization: `Bearer ${process.env.YELP_API_KEY}`\n        }\n      }).then(r => {\n        const businesses = this.parseBuisinessResponse(r.data);\n        this.setState({ businesses });\n      }).catch(e => console.error(e));\n    }\n  }\n\n\n  componentDidMount = () => {\n    const success = (position) => {\n      const lat = position.coords.latitude;\n      const lng = position.coords.longitude;\n      this.setState({\n        location: {\n          lat, lng\n        }\n      }, this.getBusinesses({\n        latitude: lat,\n        longitude: lng,\n        limit: 50, // max\n        sortBy: \"distance\"\n      }));\n    }\n    const error = () => {\n      alert(\"Access to location is required for the application to function.\")\n    }\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(success, error);\n    }\n  }\n\n  getBusinessMarkers() {\n    const { businesses } = this.state;\n    const { google } = this.props;\n    return businesses.map(business => {\n      const { latitude: lat, longitude: lng } = business.coordinates;\n      return <Marker\n        name={business.name}\n        key={business.id}\n        onClick={this.onMarkerClick}\n        position={{ lat, lng }}\n        icon={{\n          url: business.imageUrl,\n          anchor: new google.maps.Point(0, 32),\n          scaledSize: new google.maps.Size(64, 64)\n        }}\n        item={business}\n      />;\n    });\n  }\n\n  getMap() {\n    return (\n      <Map\n        className=\"map\"\n        google={this.props.google}\n        onClick={this.onMapClicked}        \n        initialCenter={this.state.location}\n        zoom={15}>\n\n        <Marker name=\"current\" onClick={this.onMarkerClick} />\n\n        {this.getBusinessMarkers()}\n      </Map>\n    );\n  }\n\n  render() {\n    console.log(this.state)\n    if (this.state.location != null) {\n      return (\n        <div>\n          <div>\n            {this.getMap()}\n          </div>\n          <div>\n            <InfoBox\n              marker={this.state.activeMarker}\n              onClose={this.onInfoWindowClose}\n              visible={this.state.showingInfoWindow}\n            />\n          </div>\n        </div>\n      )\n    }\n    else { return <div /> }\n\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: process.env.GAPI_KEY\n})(MapWithMarkers);\n","import React from 'react';\n// import { Form } from 'react-bootstrap';\nimport MapWithMarkers from './MapWithMarkers'\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>Foodie</h1>\n                {/* <Form.Control size=\"lg\" type=\"text\" placeholder=\"Satisfy your cravings\" /> */}\n                <MapWithMarkers />               \n            </div>);\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport dotenv from 'dotenv';\ndotenv.config();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}